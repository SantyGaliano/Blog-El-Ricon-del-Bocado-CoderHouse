=== manage.py ===
"""Django's command-line utility for administrative tasks."""
import os
import sys
def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'playground.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
if __name__ == '__main__':
    main()


=== accounts\admin.py ===
from django.contrib import admin
from .models import Profile
@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'bio', 'birthday')


=== accounts\apps.py ===
from django.apps import AppConfig
class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'


=== accounts\forms.py ===
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import Profile
class SignupForm(UserCreationForm):
    email = forms.EmailField(required=True)
    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']
class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'email']
class UserProfileForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['avatar', 'bio', 'birthday']


=== accounts\models.py ===
from django.db import models
from django.contrib.auth.models import User
class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    avatar = models.ImageField(upload_to='avatars/', blank=True, null=True)
    bio = models.TextField(blank=True)
    birthday = models.DateField(blank=True, null=True)
    def __str__(self):
        return f"{self.user.username} Profile"


=== accounts\tests.py ===
from django.test import TestCase


=== accounts\urls.py ===
from django.urls import path
from .views import (
    SignupView, CustomLoginView, CustomLogoutView,
    profile_view, profile_edit_view, CustomPasswordChangeView
)
urlpatterns = [
    path('signup/', SignupView.as_view(), name='signup'),
    path('login/', CustomLoginView.as_view(), name='login'),
    path('logout/', CustomLogoutView.as_view(), name='logout'),
    path('profile/', profile_view, name='profile'),
    path('profile/edit/', profile_edit_view, name='profile-edit'),
    path('profile/password/', CustomPasswordChangeView.as_view(), name='password-change'),
]


=== accounts\views.py ===
from django.shortcuts import render
from django.shortcuts import render, redirect
from django.contrib.auth.views import LoginView, LogoutView, PasswordChangeView
from django.contrib.auth.decorators import login_required
from django.urls import reverse_lazy
from django.views.generic import CreateView
from .forms import SignupForm, UserForm, UserProfileForm
class SignupView(CreateView):
    form_class = SignupForm
    template_name = 'accounts/signup.html'
    success_url = reverse_lazy('login')
class CustomLoginView(LoginView):
    template_name = 'accounts/login.html'
class CustomLogoutView(LogoutView):
    next_page = reverse_lazy('home')
@login_required
def profile_view(request):
    return render(request, 'accounts/profile.html')
@login_required
def profile_edit_view(request):
    if request.method == 'POST':
        user_form = UserForm(request.POST, instance=request.user)
        profile_form = UserProfileForm(request.POST, request.FILES, instance=request.user.profile)
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            return redirect('profile')
    else:
        user_form = UserForm(instance=request.user)
        profile_form = UserProfileForm(instance=request.user.profile)
    return render(request, 'accounts/profile_form.html', {
        'user_form': user_form,
        'profile_form': profile_form
    })
class CustomPasswordChangeView(PasswordChangeView):
    template_name = 'accounts/profile_form.html'
    success_url = reverse_lazy('profile')


=== accounts\__init__.py ===



=== accounts\migrations\0001_initial.py ===
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
class Migration(migrations.Migration):
    initial = True
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]
    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]


=== accounts\migrations\__init__.py ===



=== accounts\templates\accounts\login.html ===
{% extends "base.html" %}
{% block title %}Login{% endblock %}
{% block content %}
<h2>Login</h2>
<form method="post">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit" class="btn btn-primary">Ingresar</button>
</form>
{% endblock %}


=== accounts\templates\accounts\profile.html ===
{% extends "base.html" %}
{% block title %}Perfil{% endblock %}
{% block content %}
<h2>Perfil de {{ user.username }}</h2>
<p><strong>Nombre:</strong> {{ user.first_name }} {{ user.last_name }}</p>
<p><strong>Email:</strong> {{ user.email }}</p>
{% if user.profile.avatar %}
  <img src="{{ user.profile.avatar.url }}" class="img-thumbnail" width="150" alt="Avatar">
{% endif %}
<p><strong>Biografía:</strong> {{ user.profile.bio }}</p>
<p><strong>Cumpleaños:</strong> {{ user.profile.birthday }}</p>
<a href="{% url 'profile-edit' %}" class="btn btn-primary">Editar Perfil</a>
<a href="{% url 'password-change' %}" class="btn btn-secondary">Cambiar contraseña</a>
{% endblock %}


=== accounts\templates\accounts\profile_form.html ===
{% extends "base.html" %}
{% block title %}Editar perfil{% endblock %}
{% block content %}
<h2>Editar perfil</h2>
<form method="post" enctype="multipart/form-data">
  {% csrf_token %}
  {{ user_form.as_p }}
  {{ profile_form.as_p }}
  <button type="submit" class="btn btn-success">Guardar</button>
</form>
{% endblock %}


=== accounts\templates\accounts\signup.html ===
{% extends "base.html" %}
{% block title %}Signup{% endblock %}
{% block content %}
<h2>Registrarse</h2>
<form method="post">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit" class="btn btn-success">Crear cuenta</button>
</form>
{% endblock %}


=== playground\asgi.py ===
"""
ASGI config for playground project.
It exposes the ASGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'playground.settings')
application = get_asgi_application()


=== playground\settings.py ===
"""
Django settings for playground project.
"""
from pathlib import Path
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'django-insecure-REPLACE_ME'
DEBUG = True
ALLOWED_HOSTS = []
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ckeditor',
    'recipes',
    'accounts',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'playground.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'playground.wsgi.application'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]
LANGUAGE_CODE = 'es-ar'
TIME_ZONE = 'America/Argentina/Buenos_Aires'
USE_I18N = True
USE_TZ = True
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


=== playground\urls.py ===
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView
from django.conf import settings
from django.conf.urls.static import static
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', TemplateView.as_view(template_name='recipes/home.html'), name='home'),
    path('about/', TemplateView.as_view(template_name='recipes/about.html'), name='about'),
    path('recipes/', include('recipes.urls')),
    path('accounts/', include('accounts.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


=== playground\wsgi.py ===
"""
WSGI config for playground project.
It exposes the WSGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'playground.settings')
application = get_wsgi_application()


=== playground\__init__.py ===



=== recipes\forms.py ===
from django import forms
from .models import Recipe
class RecipeForm(forms.ModelForm):
    class Meta:
        model = Recipe
        fields = ['name', 'difficulty', 'instructions', 'image']


=== recipes\models.py ===
from django.db import models
from ckeditor.fields import RichTextField
class Recipe(models.Model):
    name         = models.CharField(max_length=200)
    difficulty   = models.CharField(max_length=100)
    instructions = RichTextField()
    image        = models.ImageField(upload_to='recipes/')
    created_at   = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return self.name


=== recipes\urls.py ===
from django.urls import path
from .views import (
    RecipeListView, RecipeDetailView,
    RecipeCreateView, RecipeUpdateView, RecipeDeleteView
)
urlpatterns = [
    path('', RecipeListView.as_view(), name='recipe-list'),
    path('create/', RecipeCreateView.as_view(), name='recipe-create'),
    path('<int:pk>/', RecipeDetailView.as_view(), name='recipe-detail'),
    path('<int:pk>/update/', RecipeUpdateView.as_view(), name='recipe-update'),
    path('<int:pk>/delete/', RecipeDeleteView.as_view(), name='recipe-delete'),
]


=== recipes\views.py ===
from django.db.models import Q
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.urls import reverse_lazy
from .models import Recipe
from .forms import RecipeForm
class RecipeListView(ListView):
    model               = Recipe
    template_name       = 'recipes/recipe_list.html'
    context_object_name = 'recipes'
    def get_queryset(self):
        qs = Recipe.objects.order_by('-created_at')
        q  = self.request.GET.get('q')
        if q:
            qs = qs.filter(
                Q(name__icontains=q) |
                Q(difficulty__icontains=q) |
                Q(instructions__icontains=q)
            )
        return qs
    def get_context_data(self, **kwargs):
        ctx      = super().get_context_data(**kwargs)
        ctx['q'] = self.request.GET.get('q', '')
        return ctx
class RecipeDetailView(DetailView):
    model             = Recipe
    template_name     = 'recipes/recipe_detail.html'
    context_object_name = 'recipe'
class RecipeCreateView(LoginRequiredMixin, CreateView):
    model       = Recipe
    form_class  = RecipeForm
    template_name = 'recipes/recipe_form.html'
    success_url = reverse_lazy('recipe-list')
class RecipeUpdateView(LoginRequiredMixin, UpdateView):
    model       = Recipe
    form_class  = RecipeForm
    template_name = 'recipes/recipe_form.html'
    success_url = reverse_lazy('recipe-list')
class RecipeDeleteView(LoginRequiredMixin, DeleteView):
    model       = Recipe
    template_name = 'recipes/recipe_confirm_delete.html'
    success_url = reverse_lazy('recipe-list')


=== recipes\migrations\0001_initial.py ===
import ckeditor.fields
from django.db import migrations, models
class Migration(migrations.Migration):
    initial = True
    dependencies = [
    ]
    operations = [
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('difficulty', models.CharField(max_length=100)),
                ('instructions', ckeditor.fields.RichTextField()),
                ('image', models.ImageField(upload_to='recipes/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]


=== recipes\migrations\__init__.py ===



=== recipes\templates\recipes\about.html ===
{% extends "base.html" %}
{% block title %}Acerca de mí{% endblock %}
{% block content %}
<h2>Acerca de mí</h2>
<p>Soy un aficionado de la cocina casera que quiere compartir recetas fáciles y deliciosas. ¡Bienvenid@!</p>
{% endblock %}


=== recipes\templates\recipes\home.html ===
{% extends "base.html" %}
{% load static %}
{% block title %}Bienvenido{% endblock %}
{% block extra_css %}{% endblock %}
{% block fullwidth_content %}
<section class="hero d-flex align-items-center justify-content-center">
  <video
    autoplay
    muted
    loop
    playsinline
    preload="auto"
    poster="{% static 'images/video-poster.jpg' %}"
    id="bg-video"
  >
    <source src="{% static 'videos/9020877-uhd_3840_2160_25fps.mp4' %}" type="video/mp4">
    Tu navegador no soporta video HTML5.
  </video>
  <div class="hero-content text-center px-3">
    <h1 class="display-3 fw-bold">¡Descubre tus Recetas Favoritas!</h1>
    <p class="lead mb-4">Comparte y explora recetas caseras fáciles y deliciosas.</p>
    <a href="{% url 'recipe-list' %}" class="btn btn-lg btn-primary me-2">Ver Recetas</a>
    {% if user.is_authenticated %}
      <a href="{% url 'recipe-create' %}" class="btn btn-lg btn-outline-light">Crear Receta</a>
    {% else %}
      <a href="{% url 'signup' %}" class="btn btn-lg btn-outline-light">Regístrate</a>
    {% endif %}
  </div>
</section>
{% endblock %}
{% block content %}
<div class="mt-5">
  <h2 class="mb-4">Últimas Recetas</h2>
  <div class="row">
    {% for recipe in recipes|slice:":4" %}
      <div class="col-md-6 col-lg-3 mb-4">
        <div class="card h-100 shadow-sm">
          {% if recipe.image %}
            <img src="{{ recipe.image.url }}" class="card-img-top" alt="{{ recipe.name }}">
          {% endif %}
          <div class="card-body">
            <h5 class="card-title">{{ recipe.name }}</h5>
            <p class="card-text"><strong>Dificultad:</strong> {{ recipe.difficulty }}</p>
            <a href="{% url 'recipe-detail' recipe.pk %}" class="btn btn-sm btn-outline-primary">Ver más</a>
          </div>
        </div>
      </div>
    {% empty %}
      <p>No hay recetas aún. <a href="{% url 'recipe-create' %}">Sé el primero en crear una.</a></p>
    {% endfor %}
  </div>
  <div class="text-center mt-4">
    <a href="{% url 'recipe-list' %}" class="btn btn-outline-secondary">Ver todas las recetas</a>
  </div>
</div>
{% endblock %}


=== recipes\templates\recipes\recipe_confirm_delete.html ===
{% extends "base.html" %}
{% block title %}Eliminar Receta{% endblock %}
{% block content %}
<h2>Confirmar borrado</h2>
<p>¿Seguro que deseas eliminar "{{ object.name }}"?</p>
<form method="post">
  {% csrf_token %}
  <button type="submit" class="btn btn-danger">Sí, eliminar</button>
  <a href="{% url 'recipe-detail' object.pk %}" class="btn btn-secondary">Cancelar</a>
</form>
{% endblock %}


=== recipes\templates\recipes\recipe_detail.html ===
{% extends "base.html" %}
{% block title %}{{ recipe.name }}{% endblock %}
{% block content %}
<article>
  <h1>{{ recipe.name }}</h1>
  <p><em>Dificultad: {{ recipe.difficulty }}</em></p>
  {% if recipe.image %}
    <img src="{{ recipe.image.url }}" class="img-fluid mb-3" alt="{{ recipe.name }}">
  {% endif %}
  <div>{{ recipe.instructions|safe }}</div>
</article>
{% if user.is_authenticated %}
  <a href="{% url 'recipe-update' recipe.pk %}" class="btn btn-warning">Editar</a>
  <a href="{% url 'recipe-delete' recipe.pk %}" class="btn btn-danger">Borrar</a>
{% endif %}
{% endblock %}


=== recipes\templates\recipes\recipe_form.html ===
{% extends "base.html" %}
{% block title %}{% if form.instance.pk %}Editar Receta{% else %}Crear Receta{% endif %}{% endblock %}
{% block content %}
<h2>{% if form.instance.pk %}Editar{% else %}Crear{% endif %} Receta</h2>
<form method="post" enctype="multipart/form-data">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit" class="btn btn-success">Guardar</button>
</form>
{% endblock %}


=== recipes\templates\recipes\recipe_list.html ===
{% extends "base.html" %}
{% block title %}Recetas{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-3">
  <h2>Recetas</h2>
  {% if user.is_authenticated %}
    <a class="btn btn-primary" href="{% url 'recipe-create' %}">Crear Receta</a>
  {% endif %}
</div>
<form method="get" class="mb-3">
  <div class="input-group">
    <input type="text" name="q" value="{{ q }}" class="form-control" placeholder="Buscar recetas...">
    <button class="btn btn-outline-secondary" type="submit">Buscar</button>
  </div>
</form>
{% if recipes %}
  <div class="row">
    {% for recipe in recipes %}
      <div class="col-md-6 mb-4">
        <div class="card h-100">
          {% if recipe.image %}
            <img src="{{ recipe.image.url }}" class="card-img-top" alt="{{ recipe.name }}">
          {% endif %}
          <div class="card-body">
            <h5 class="card-title">{{ recipe.name }}</h5>
            <p class="card-text"><strong>Dificultad:</strong> {{ recipe.difficulty }}</p>
            <a href="{% url 'recipe-detail' recipe.pk %}" class="btn btn-outline-primary">Ver receta</a>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
{% else %}
  {% if q %}
    <p>No se encontraron recetas para "<strong>{{ q }}</strong>".</p>
  {% else %}
    <p>No hay recetas aún.</p>
  {% endif %}
{% endif %}
{% endblock %}


=== static\css\styles.css ===
/* Layout general para llevar el footer siempre al fondo */
html, body {
  height: 100%;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: var(--color-light);  /* Fondo gris global */
}
/* Contenedor flex para empujar el footer al fondo */
body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}
/* Contenedor principal: espacio bajo navbar y expande para footer */
.content-container {
  flex: 1;
  padding-top: 100px; /* espacio para navbar (80px) + margen */
}
/* Variables de color */ 
:root {
}
/* Tipografía global */
html, body {
  font-family: var(--font-base);
  color: var(--color-dark);
}
/* Navbar */
.navbar-custom {
  height: 80px;
  background-color: rgba(0,0,0,0.4);
  transition: background-color 0.3s;
  overflow: visible;
}
.navbar-custom.scrolled {
  background-color: rgba(0,0,0,0.6);
}
.navbar-custom .navbar-brand,
.navbar-custom .nav-link {
  line-height: 80px;
  color: #fff;
}
/* Logo dentro del navbar */
.navbar-brand img {
  height: 175px;
  margin-top: -10px;  /* ajustado para centrar un poco más */
  object-fit: contain;
}
/* Hero */
.hero {
  position: relative;
  width: 100vw;
  min-height: 100vh;
  overflow: hidden;
  flex-shrink: 0;
}
.hero video {
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  object-fit: cover;
  z-index: 0;
}
.hero::before {
  content: '';
  position: absolute;
  inset: 0;
  background: rgba(0,0,0,0.3);
  z-index: 1;
}
.hero .hero-content {
  position: relative;
  z-index: 2;
  color: #fff;
  padding-top: 80px;
}
/* Cards */
.card {
  background-color: #fff;
  border: none;
  border-radius: .75rem;
  box-shadow: 0 2px 15px rgba(0,0,0,0.1);
  transition: transform .3s;
}
.card:hover {
  transform: translateY(-5px);
}
/* Buttons */
.btn-primary {
  background-image: linear-gradient(45deg, var(--color-primary), var(--color-secondary));
  border: none;
}
.btn-outline-secondary {
  border-radius: .5rem;
}
/* Footer global */
.footer {
  background-color: #222222;
  color: var(--color-dark);
  padding: 2rem 0;
  margin-top: 2rem;
}
.footer a {
  color: var(--color-dark);
  text-decoration: none;
}
.footer a:hover {
  color: #fff;
  text-decoration: underline;
}


=== templates\base.html ===
{% load static %}
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{% block title %}Playground{% endblock %}</title>
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="{% static 'css/styles.css' %}">
  {% block extra_css %}{% endblock %}
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark navbar-custom fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="{% url 'home' %}">
        <img src="{% static 'images/El Rincón Del Bocado.png' %}"
             alt="El Rincón Del Bocado">
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navMenu">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navMenu">
        <ul class="navbar-nav me-auto">
          <li class="nav-item"><a class="nav-link" href="{% url 'home' %}">Inicio</a></li>
          <li class="nav-item"><a class="nav-link" href="{% url 'about' %}">Acerca de</a></li>
          <li class="nav-item"><a class="nav-link" href="{% url 'recipe-list' %}">Recetas</a></li>
        </ul>
        <ul class="navbar-nav">
          {% if user.is_authenticated %}
            <li class="nav-item"><a class="nav-link" href="{% url 'profile' %}">Perfil</a></li>
            <li class="nav-item"><a class="nav-link" href="{% url 'logout' %}">Cerrar sesión</a></li>
          {% else %}
            <li class="nav-item"><a class="nav-link" href="{% url 'login' %}">Iniciar sesión</a></li>
            <li class="nav-item"><a class="nav-link" href="{% url 'signup' %}">Registrarse</a></li>
          {% endif %}
        </ul>
      </div>
    </div>
  </nav>
  {% block fullwidth_content %}{% endblock %}
  <div class="container content-container">
    {% if messages %}
      {% for message in messages %}
        <div class="alert alert-{{ message.tags }}">{{ message }}</div>
      {% endfor %}
    {% endif %}
    {% block content %}{% endblock %}
  </div>
  <!-- Footer -->
  <footer class="footer">
    <div class="container">
      <div class="row">
        <div class="col-md-4 mb-3">
          <h5 style="color: var(--color-dark)">Sobre El Rincón Del Bocado</h5>
          <p>Un espacio para compartir y descubrir recetas caseras fáciles y deliciosas.</p>
        </div>
        <div class="col-md-4 mb-3">
          <h5 style="color: var(--color-dark)">Enlaces</h5>
          <ul class="list-unstyled">
            <li><a href="{% url 'home' %}">Inicio</a></li>
            <li><a href="{% url 'about' %}">Acerca de</a></li>
            <li><a href="{% url 'recipe-list' %}">Recetas</a></li>
          </ul>
        </div>
        <div class="col-md-4 mb-3">
          <h5 style="color: var(--color-dark)">Contacto</h5>
          <p>Email: contacto@elrincondelbocado.com</p>
          <p>Teléfono: +54 9 11 1234-5678</p>
        </div>
      </div>
      <div class="text-center mt-3" style="color: var(--color-dark)">
        &copy; 2025 El Rincón Del Bocado. Todos los derechos reservados.
      </div>
    </div>
  </footer>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    window.addEventListener('scroll', function() {
      document.querySelector('.navbar-custom')
              .classList.toggle('scrolled', window.scrollY > 50);
    });
  </script>
  {% block extra_js %}{% endblock %}
</body>
</html>

